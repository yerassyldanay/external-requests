// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider/ratelimiter/interface.go

// Package mock_ratelimiter is a generated GoMock package.
package mock_ratelimiter

import (
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExternalReqLimiter is a mock of ExternalReqLimiter interface.
type MockExternalReqLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockExternalReqLimiterMockRecorder
}

// MockExternalReqLimiterMockRecorder is the mock recorder for MockExternalReqLimiter.
type MockExternalReqLimiterMockRecorder struct {
	mock *MockExternalReqLimiter
}

// NewMockExternalReqLimiter creates a new mock instance.
func NewMockExternalReqLimiter(ctrl *gomock.Controller) *MockExternalReqLimiter {
	mock := &MockExternalReqLimiter{ctrl: ctrl}
	mock.recorder = &MockExternalReqLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalReqLimiter) EXPECT() *MockExternalReqLimiterMockRecorder {
	return m.recorder
}

// Allowed mocks base method.
func (m *MockExternalReqLimiter) Allowed(ctx context.Context, url url.URL) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allowed", ctx, url)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allowed indicates an expected call of Allowed.
func (mr *MockExternalReqLimiterMockRecorder) Allowed(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockExternalReqLimiter)(nil).Allowed), ctx, url)
}

// Record mocks base method.
func (m *MockExternalReqLimiter) Record(ctx context.Context, url url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Record indicates an expected call of Record.
func (mr *MockExternalReqLimiterMockRecorder) Record(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockExternalReqLimiter)(nil).Record), ctx, url)
}
