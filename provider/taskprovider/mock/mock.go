// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider/taskprovider/querier.go

// Package mock_taskprovider is a generated GoMock package.
package mock_taskprovider

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	taskprovider "github.com/yerassyldanay/requestmaker/provider/taskprovider"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddHttpResponseData mocks base method.
func (m *MockQuerier) AddHttpResponseData(ctx context.Context, arg taskprovider.AddHttpResponseDataParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHttpResponseData", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHttpResponseData indicates an expected call of AddHttpResponseData.
func (mr *MockQuerierMockRecorder) AddHttpResponseData(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHttpResponseData", reflect.TypeOf((*MockQuerier)(nil).AddHttpResponseData), ctx, arg)
}

// CreateWithStatus mocks base method.
func (m *MockQuerier) CreateWithStatus(ctx context.Context, taskStatus string) (taskprovider.CreateWithStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithStatus", ctx, taskStatus)
	ret0, _ := ret[0].(taskprovider.CreateWithStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithStatus indicates an expected call of CreateWithStatus.
func (mr *MockQuerierMockRecorder) CreateWithStatus(ctx, taskStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithStatus", reflect.TypeOf((*MockQuerier)(nil).CreateWithStatus), ctx, taskStatus)
}

// GetOne mocks base method.
func (m *MockQuerier) GetOne(ctx context.Context, taskID uuid.UUID) (taskprovider.RequestsTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, taskID)
	ret0, _ := ret[0].(taskprovider.RequestsTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockQuerierMockRecorder) GetOne(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockQuerier)(nil).GetOne), ctx, taskID)
}

// UpdateStatus mocks base method.
func (m *MockQuerier) UpdateStatus(ctx context.Context, arg taskprovider.UpdateStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockQuerierMockRecorder) UpdateStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateStatus), ctx, arg)
}
