// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package taskprovider

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addHttpResponseDataStmt, err = db.PrepareContext(ctx, addHttpResponseData); err != nil {
		return nil, fmt.Errorf("error preparing query AddHttpResponseData: %w", err)
	}
	if q.createWithStatusStmt, err = db.PrepareContext(ctx, createWithStatus); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWithStatus: %w", err)
	}
	if q.getOneStmt, err = db.PrepareContext(ctx, getOne); err != nil {
		return nil, fmt.Errorf("error preparing query GetOne: %w", err)
	}
	if q.updateStatusStmt, err = db.PrepareContext(ctx, updateStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addHttpResponseDataStmt != nil {
		if cerr := q.addHttpResponseDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addHttpResponseDataStmt: %w", cerr)
		}
	}
	if q.createWithStatusStmt != nil {
		if cerr := q.createWithStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWithStatusStmt: %w", cerr)
		}
	}
	if q.getOneStmt != nil {
		if cerr := q.getOneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneStmt: %w", cerr)
		}
	}
	if q.updateStatusStmt != nil {
		if cerr := q.updateStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	addHttpResponseDataStmt *sql.Stmt
	createWithStatusStmt    *sql.Stmt
	getOneStmt              *sql.Stmt
	updateStatusStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		addHttpResponseDataStmt: q.addHttpResponseDataStmt,
		createWithStatusStmt:    q.createWithStatusStmt,
		getOneStmt:              q.getOneStmt,
		updateStatusStmt:        q.updateStatusStmt,
	}
}
