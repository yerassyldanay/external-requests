// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider/msgbroker/interface.go

// Package mock_msgbroker is a generated GoMock package.
package mock_msgbroker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMBPublisher is a mock of MBPublisher interface.
type MockMBPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockMBPublisherMockRecorder
}

// MockMBPublisherMockRecorder is the mock recorder for MockMBPublisher.
type MockMBPublisherMockRecorder struct {
	mock *MockMBPublisher
}

// NewMockMBPublisher creates a new mock instance.
func NewMockMBPublisher(ctrl *gomock.Controller) *MockMBPublisher {
	mock := &MockMBPublisher{ctrl: ctrl}
	mock.recorder = &MockMBPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMBPublisher) EXPECT() *MockMBPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockMBPublisher) Publish(ctx context.Context, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockMBPublisherMockRecorder) Publish(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMBPublisher)(nil).Publish), ctx, msg)
}

// MockMBConsumer is a mock of MBConsumer interface.
type MockMBConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockMBConsumerMockRecorder
}

// MockMBConsumerMockRecorder is the mock recorder for MockMBConsumer.
type MockMBConsumerMockRecorder struct {
	mock *MockMBConsumer
}

// NewMockMBConsumer creates a new mock instance.
func NewMockMBConsumer(ctrl *gomock.Controller) *MockMBConsumer {
	mock := &MockMBConsumer{ctrl: ctrl}
	mock.recorder = &MockMBConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMBConsumer) EXPECT() *MockMBConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockMBConsumer) Consume(ctx context.Context) (chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx)
	ret0, _ := ret[0].(chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockMBConsumerMockRecorder) Consume(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockMBConsumer)(nil).Consume), ctx)
}

// MockMessageBroker is a mock of MessageBroker interface.
type MockMessageBroker struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBrokerMockRecorder
}

// MockMessageBrokerMockRecorder is the mock recorder for MockMessageBroker.
type MockMessageBrokerMockRecorder struct {
	mock *MockMessageBroker
}

// NewMockMessageBroker creates a new mock instance.
func NewMockMessageBroker(ctrl *gomock.Controller) *MockMessageBroker {
	mock := &MockMessageBroker{ctrl: ctrl}
	mock.recorder = &MockMessageBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBroker) EXPECT() *MockMessageBrokerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockMessageBroker) Consume(ctx context.Context) (chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx)
	ret0, _ := ret[0].(chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockMessageBrokerMockRecorder) Consume(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockMessageBroker)(nil).Consume), ctx)
}

// Publish mocks base method.
func (m *MockMessageBroker) Publish(ctx context.Context, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockMessageBrokerMockRecorder) Publish(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMessageBroker)(nil).Publish), ctx, msg)
}
